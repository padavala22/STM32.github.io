
PTR_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052bc  080052bc  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c4  080052c4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080052cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000024  080052f0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  080052f0  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d100  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000244b  00000000  00000000  0002d197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b8  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169c2  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd8e  00000000  00000000  000473b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088c29  00000000  00000000  00057140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d78  00000000  00000000  000dfd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000e2ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004aa8 	.word	0x08004aa8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	08004aa8 	.word	0x08004aa8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
 80004ee:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <MX_GPIO_Init+0xe0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a30      	ldr	r2, [pc, #192]	; (80005b4 <MX_GPIO_Init+0xe0>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <MX_GPIO_Init+0xe0>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_GPIO_Init+0xe0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a29      	ldr	r2, [pc, #164]	; (80005b4 <MX_GPIO_Init+0xe0>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <MX_GPIO_Init+0xe0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <MX_GPIO_Init+0xe0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a22      	ldr	r2, [pc, #136]	; (80005b4 <MX_GPIO_Init+0xe0>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <MX_GPIO_Init+0xe0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <MX_GPIO_Init+0xe0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <MX_GPIO_Init+0xe0>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <MX_GPIO_Init+0xe0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2120      	movs	r1, #32
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <MX_GPIO_Init+0xe4>)
 8000560:	f001 f8c2 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800056a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000570:	2301      	movs	r3, #1
 8000572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	4810      	ldr	r0, [pc, #64]	; (80005bc <MX_GPIO_Init+0xe8>)
 800057c:	f000 ff30 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000580:	2320      	movs	r3, #32
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <MX_GPIO_Init+0xe4>)
 8000598:	f000 ff22 	bl	80013e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	2028      	movs	r0, #40	; 0x28
 80005a2:	f000 feb6 	bl	8001312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a6:	2028      	movs	r0, #40	; 0x28
 80005a8:	f000 fecf 	bl	800134a <HAL_NVIC_EnableIRQ>

}
 80005ac:	bf00      	nop
 80005ae:	3728      	adds	r7, #40	; 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40020000 	.word	0x40020000
 80005bc:	40020800 	.word	0x40020800

080005c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]
	 HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin );
 80005ca:	2120      	movs	r1, #32
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <HAL_GPIO_EXTI_Callback+0x1c>)
 80005ce:	f001 f8a4 	bl	800171a <HAL_GPIO_TogglePin>
  /* Prevent unused argument(s) compilation warning */
 // UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40020000 	.word	0x40020000

080005e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C1_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C1_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C1_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C1_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 240;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f8:	22f0      	movs	r2, #240	; 0xf0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C1_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C1_Init+0x50>)
 8000612:	2240      	movs	r2, #64	; 0x40
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C1_Init+0x50>)
 800061e:	f001 f8af 	bl	8001780 <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 f98c 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000040 	.word	0x20000040
 8000634:	40005400 	.word	0x40005400
 8000638:	00061a80 	.word	0x00061a80

0800063c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <HAL_I2C_MspInit+0xa4>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d13c      	bne.n	80006d8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <HAL_I2C_MspInit+0xa8>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <HAL_I2C_MspInit+0xa8>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <HAL_I2C_MspInit+0xa8>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800067a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800067e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000680:	2312      	movs	r3, #18
 8000682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800068c:	2304      	movs	r3, #4
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	4814      	ldr	r0, [pc, #80]	; (80006e8 <HAL_I2C_MspInit+0xac>)
 8000698:	f000 fea2 	bl	80013e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_I2C_MspInit+0xa8>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_I2C_MspInit+0xa8>)
 80006a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <HAL_I2C_MspInit+0xa8>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	201f      	movs	r0, #31
 80006be:	f000 fe28 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006c2:	201f      	movs	r0, #31
 80006c4:	f000 fe41 	bl	800134a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2020      	movs	r0, #32
 80006ce:	f000 fe20 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006d2:	2020      	movs	r0, #32
 80006d4:	f000 fe39 	bl	800134a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40005400 	.word	0x40005400
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020400 	.word	0x40020400

080006ec <fun_state_a>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t test1;
state present_state;

void fun_state_a(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 faeb 	bl	8000ccc <ssd1306_Fill>
	sm_test1("123456789" , 15);
 80006f6:	210f      	movs	r1, #15
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <fun_state_a+0x3c>)
 80006fa:	f000 fc7f 	bl	8000ffc <sm_test1>
	sm_test1("123456789" , 25);
 80006fe:	2119      	movs	r1, #25
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <fun_state_a+0x3c>)
 8000702:	f000 fc7b 	bl	8000ffc <sm_test1>
	sm_test1("123456789" , 35);
 8000706:	2123      	movs	r1, #35	; 0x23
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <fun_state_a+0x3c>)
 800070a:	f000 fc77 	bl	8000ffc <sm_test1>
	sm_test1("123456789" , 45);
 800070e:	212d      	movs	r1, #45	; 0x2d
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <fun_state_a+0x3c>)
 8000712:	f000 fc73 	bl	8000ffc <sm_test1>
	 HAL_UART_Transmit(&huart2, (uint8_t *)"hello state_a\r\n", strlen("hello state_d\r\n"), HAL_MAX_DELAY);
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	220f      	movs	r2, #15
 800071c:	4903      	ldr	r1, [pc, #12]	; (800072c <fun_state_a+0x40>)
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <fun_state_a+0x44>)
 8000720:	f003 fe21 	bl	8004366 <HAL_UART_Transmit>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	08004ac0 	.word	0x08004ac0
 800072c:	08004acc 	.word	0x08004acc
 8000730:	20000098 	.word	0x20000098

08000734 <fun_state_b>:
void fun_state_b(void){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fac7 	bl	8000ccc <ssd1306_Fill>
	sm_test1("ABCDEFGHIJKL" , 15);
 800073e:	210f      	movs	r1, #15
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <fun_state_b+0x3c>)
 8000742:	f000 fc5b 	bl	8000ffc <sm_test1>
	sm_test1("ABCDEFGHIJKL" , 25);
 8000746:	2119      	movs	r1, #25
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <fun_state_b+0x3c>)
 800074a:	f000 fc57 	bl	8000ffc <sm_test1>
	sm_test1("ABCDEFGHIJKL" , 35);
 800074e:	2123      	movs	r1, #35	; 0x23
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <fun_state_b+0x3c>)
 8000752:	f000 fc53 	bl	8000ffc <sm_test1>
	sm_test1("ABCDEFGHIJKL" , 45);
 8000756:	212d      	movs	r1, #45	; 0x2d
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <fun_state_b+0x3c>)
 800075a:	f000 fc4f 	bl	8000ffc <sm_test1>
	 HAL_UART_Transmit(&huart2, (uint8_t *)"hello state_b\r\n", strlen("hello state_d\r\n"), HAL_MAX_DELAY);
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	220f      	movs	r2, #15
 8000764:	4903      	ldr	r1, [pc, #12]	; (8000774 <fun_state_b+0x40>)
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <fun_state_b+0x44>)
 8000768:	f003 fdfd 	bl	8004366 <HAL_UART_Transmit>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	08004adc 	.word	0x08004adc
 8000774:	08004aec 	.word	0x08004aec
 8000778:	20000098 	.word	0x20000098

0800077c <fun_state_c>:
void fun_state_c(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8000780:	2000      	movs	r0, #0
 8000782:	f000 faa3 	bl	8000ccc <ssd1306_Fill>
	sm_test1("!@#$%^&*(" , 15);
 8000786:	210f      	movs	r1, #15
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <fun_state_c+0x3c>)
 800078a:	f000 fc37 	bl	8000ffc <sm_test1>
	sm_test1("!@#$%^&*(" , 25);
 800078e:	2119      	movs	r1, #25
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <fun_state_c+0x3c>)
 8000792:	f000 fc33 	bl	8000ffc <sm_test1>
	sm_test1("!@#$%^&*(" , 35);
 8000796:	2123      	movs	r1, #35	; 0x23
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <fun_state_c+0x3c>)
 800079a:	f000 fc2f 	bl	8000ffc <sm_test1>
	sm_test1("!@#$%^&*(" , 45);
 800079e:	212d      	movs	r1, #45	; 0x2d
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <fun_state_c+0x3c>)
 80007a2:	f000 fc2b 	bl	8000ffc <sm_test1>
	 HAL_UART_Transmit(&huart2, (uint8_t *)"hello state_c\r\n", strlen("hello state_d\r\n"), HAL_MAX_DELAY);
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	220f      	movs	r2, #15
 80007ac:	4903      	ldr	r1, [pc, #12]	; (80007bc <fun_state_c+0x40>)
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <fun_state_c+0x44>)
 80007b0:	f003 fdd9 	bl	8004366 <HAL_UART_Transmit>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08004afc 	.word	0x08004afc
 80007bc:	08004b08 	.word	0x08004b08
 80007c0:	20000098 	.word	0x20000098

080007c4 <fun_state_d>:
void fun_state_d(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fa7f 	bl	8000ccc <ssd1306_Fill>
	sm_test1("fffffffffffffff" , 15);
 80007ce:	210f      	movs	r1, #15
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <fun_state_d+0x3c>)
 80007d2:	f000 fc13 	bl	8000ffc <sm_test1>
	sm_test1("fffffffffffffff" , 25);
 80007d6:	2119      	movs	r1, #25
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <fun_state_d+0x3c>)
 80007da:	f000 fc0f 	bl	8000ffc <sm_test1>
	sm_test1("fffffffffffffff" , 35);
 80007de:	2123      	movs	r1, #35	; 0x23
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <fun_state_d+0x3c>)
 80007e2:	f000 fc0b 	bl	8000ffc <sm_test1>
	sm_test1("fffffffffffffff" , 45);
 80007e6:	212d      	movs	r1, #45	; 0x2d
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <fun_state_d+0x3c>)
 80007ea:	f000 fc07 	bl	8000ffc <sm_test1>
	 HAL_UART_Transmit(&huart2, (uint8_t *)"hello state_d\r\n", strlen("hello state_d\r\n"), HAL_MAX_DELAY);
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	220f      	movs	r2, #15
 80007f4:	4903      	ldr	r1, [pc, #12]	; (8000804 <fun_state_d+0x40>)
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <fun_state_d+0x44>)
 80007f8:	f003 fdb5 	bl	8004366 <HAL_UART_Transmit>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	08004b18 	.word	0x08004b18
 8000804:	08004b28 	.word	0x08004b28
 8000808:	20000098 	.word	0x20000098

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fc0e 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f82c 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f7ff fe5c 	bl	80004d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800081c:	f000 f918 	bl	8000a50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000820:	f7ff fede 	bl	80005e0 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//char txData[] = "Hello, UART!\r\n";
  ssd1306_Init();
 8000824:	f000 f9e8 	bl	8000bf8 <ssd1306_Init>
  ssd1306_Fill(White);
 8000828:	2001      	movs	r0, #1
 800082a:	f000 fa4f 	bl	8000ccc <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800082e:	f000 fa71 	bl	8000d14 <ssd1306_UpdateScreen>
	      // Input is low
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin );
	  }*/

   // HAL_UART_Transmit(&huart2, (uint8_t *)txData, strlen(txData), HAL_MAX_DELAY);
    HAL_Delay(1000);
 8000832:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000836:	f000 fc6d 	bl	8001114 <HAL_Delay>
    ptr[present_state]();
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <main+0x5c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <main+0x60>)
 8000842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000846:	4798      	blx	r3
    if (present_state == state_D)
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <main+0x5c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d103      	bne.n	8000858 <main+0x4c>
    	present_state=state_A;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <main+0x5c>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e7ec      	b.n	8000832 <main+0x26>
    else
    	present_state++;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <main+0x5c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b01      	ldr	r3, [pc, #4]	; (8000868 <main+0x5c>)
 8000862:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1000);
 8000864:	e7e5      	b.n	8000832 <main+0x26>
 8000866:	bf00      	nop
 8000868:	20000094 	.word	0x20000094
 800086c:	20000000 	.word	0x20000000

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f004 f8e6 	bl	8004a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a27      	ldr	r2, [pc, #156]	; (800093c <SystemClock_Config+0xcc>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <SystemClock_Config+0xcc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <SystemClock_Config+0xd0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a21      	ldr	r2, [pc, #132]	; (8000940 <SystemClock_Config+0xd0>)
 80008ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <SystemClock_Config+0xd0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 80008e0:	2307      	movs	r3, #7
 80008e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ea:	2304      	movs	r3, #4
 80008ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ee:	2304      	movs	r3, #4
 80008f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 f850 	bl	800399c <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000902:	f000 f81f 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2302      	movs	r3, #2
 800090c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000916:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2103      	movs	r1, #3
 8000922:	4618      	mov	r0, r3
 8000924:	f003 fab2 	bl	8003e8c <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800092e:	f000 f809 	bl	8000944 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	; 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_MspInit+0x4c>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800098e:	2007      	movs	r0, #7
 8000990:	f000 fcb4 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 fb72 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <I2C1_EV_IRQHandler+0x10>)
 80009fa:	f001 f8ff 	bl	8001bfc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000040 	.word	0x20000040

08000a08 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <I2C1_ER_IRQHandler+0x10>)
 8000a0e:	f001 fa48 	bl	8001ea2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000040 	.word	0x20000040

08000a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a24:	f000 fe94 	bl	8001750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_USART2_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a88:	f003 fc20 	bl	80042cc <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f7ff ff57 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000098 	.word	0x20000098
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12b      	bne.n	8000b1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000afe:	230c      	movs	r3, #12
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_UART_MspInit+0x8c>)
 8000b1a:	f000 fc61 	bl	80013e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40004400 	.word	0x40004400
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3a:	490e      	ldr	r1, [pc, #56]	; (8000b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b50:	4c0b      	ldr	r4, [pc, #44]	; (8000b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b5e:	f7ff ff65 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f003 ff7d 	bl	8004a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fe51 	bl	800080c <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000b78:	080052cc 	.word	0x080052cc
  ldr r2, =_sbss
 8000b7c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000b80:	200004e8 	.word	0x200004e8

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>

08000b86 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy
#define SSD1306_USE_I2C
#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af04      	add	r7, sp, #16
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	9302      	str	r3, [sp, #8]
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2301      	movs	r3, #1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2178      	movs	r1, #120	; 0x78
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <ssd1306_WriteCommand+0x2c>)
 8000bb4:	f000 ff28 	bl	8001a08 <HAL_I2C_Mem_Write>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000040 	.word	0x20000040

08000bc4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af04      	add	r7, sp, #16
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd6:	9202      	str	r2, [sp, #8]
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2301      	movs	r3, #1
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	2178      	movs	r1, #120	; 0x78
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <ssd1306_WriteData+0x30>)
 8000be6:	f000 ff0f 	bl	8001a08 <HAL_I2C_Mem_Write>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000040 	.word	0x20000040

08000bf8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000bfc:	f7ff ffc3 	bl	8000b86 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000c00:	2064      	movs	r0, #100	; 0x64
 8000c02:	f000 fa87 	bl	8001114 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f9da 	bl	8000fc0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c0c:	2020      	movs	r0, #32
 8000c0e:	f7ff ffc1 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ffbe 	bl	8000b94 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c18:	20b0      	movs	r0, #176	; 0xb0
 8000c1a:	f7ff ffbb 	bl	8000b94 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c1e:	20c8      	movs	r0, #200	; 0xc8
 8000c20:	f7ff ffb8 	bl	8000b94 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff ffb5 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000c2a:	2010      	movs	r0, #16
 8000c2c:	f7ff ffb2 	bl	8000b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000c30:	2040      	movs	r0, #64	; 0x40
 8000c32:	f7ff ffaf 	bl	8000b94 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	f000 f9ae 	bl	8000f98 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000c3c:	20a1      	movs	r0, #161	; 0xa1
 8000c3e:	f7ff ffa9 	bl	8000b94 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000c42:	20a6      	movs	r0, #166	; 0xa6
 8000c44:	f7ff ffa6 	bl	8000b94 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000c48:	20a8      	movs	r0, #168	; 0xa8
 8000c4a:	f7ff ffa3 	bl	8000b94 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000c4e:	203f      	movs	r0, #63	; 0x3f
 8000c50:	f7ff ffa0 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c54:	20a4      	movs	r0, #164	; 0xa4
 8000c56:	f7ff ff9d 	bl	8000b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000c5a:	20d3      	movs	r0, #211	; 0xd3
 8000c5c:	f7ff ff9a 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff ff97 	bl	8000b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c66:	20d5      	movs	r0, #213	; 0xd5
 8000c68:	f7ff ff94 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c6c:	20f0      	movs	r0, #240	; 0xf0
 8000c6e:	f7ff ff91 	bl	8000b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c72:	20d9      	movs	r0, #217	; 0xd9
 8000c74:	f7ff ff8e 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c78:	2022      	movs	r0, #34	; 0x22
 8000c7a:	f7ff ff8b 	bl	8000b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c7e:	20da      	movs	r0, #218	; 0xda
 8000c80:	f7ff ff88 	bl	8000b94 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c84:	2012      	movs	r0, #18
 8000c86:	f7ff ff85 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c8a:	20db      	movs	r0, #219	; 0xdb
 8000c8c:	f7ff ff82 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c90:	2020      	movs	r0, #32
 8000c92:	f7ff ff7f 	bl	8000b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c96:	208d      	movs	r0, #141	; 0x8d
 8000c98:	f7ff ff7c 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c9c:	2014      	movs	r0, #20
 8000c9e:	f7ff ff79 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f000 f98c 	bl	8000fc0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 f80f 	bl	8000ccc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000cae:	f000 f831 	bl	8000d14 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <ssd1306_Init+0xd0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <ssd1306_Init+0xd0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000cbe:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <ssd1306_Init+0xd0>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	711a      	strb	r2, [r3, #4]
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200004dc 	.word	0x200004dc

08000ccc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	e00d      	b.n	8000cf8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <ssd1306_Fill+0x1a>
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	e000      	b.n	8000ce8 <ssd1306_Fill+0x1c>
 8000ce6:	21ff      	movs	r1, #255	; 0xff
 8000ce8:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <ssd1306_Fill+0x44>)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	460a      	mov	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfe:	d3ed      	bcc.n	8000cdc <ssd1306_Fill+0x10>
    }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200000dc 	.word	0x200000dc

08000d14 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	e016      	b.n	8000d4e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	3b50      	subs	r3, #80	; 0x50
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff34 	bl	8000b94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff ff31 	bl	8000b94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000d32:	2010      	movs	r0, #16
 8000d34:	f7ff ff2e 	bl	8000b94 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	01db      	lsls	r3, r3, #7
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <ssd1306_UpdateScreen+0x4c>)
 8000d3e:	4413      	add	r3, r2
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff3e 	bl	8000bc4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b07      	cmp	r3, #7
 8000d52:	d9e5      	bls.n	8000d20 <ssd1306_UpdateScreen+0xc>
    }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000dc 	.word	0x200000dc

08000d64 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	71bb      	strb	r3, [r7, #6]
 8000d72:	4613      	mov	r3, r2
 8000d74:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db3d      	blt.n	8000dfa <ssd1306_DrawPixel+0x96>
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	2b3f      	cmp	r3, #63	; 0x3f
 8000d82:	d83a      	bhi.n	8000dfa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d84:	797b      	ldrb	r3, [r7, #5]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d11a      	bne.n	8000dc0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d8a:	79fa      	ldrb	r2, [r7, #7]
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	b2d8      	uxtb	r0, r3
 8000d92:	4603      	mov	r3, r0
 8000d94:	01db      	lsls	r3, r3, #7
 8000d96:	4413      	add	r3, r2
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <ssd1306_DrawPixel+0xa4>)
 8000d9a:	5cd3      	ldrb	r3, [r2, r3]
 8000d9c:	b25a      	sxtb	r2, r3
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	2101      	movs	r1, #1
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b259      	sxtb	r1, r3
 8000db0:	79fa      	ldrb	r2, [r7, #7]
 8000db2:	4603      	mov	r3, r0
 8000db4:	01db      	lsls	r3, r3, #7
 8000db6:	4413      	add	r3, r2
 8000db8:	b2c9      	uxtb	r1, r1
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <ssd1306_DrawPixel+0xa4>)
 8000dbc:	54d1      	strb	r1, [r2, r3]
 8000dbe:	e01d      	b.n	8000dfc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dc0:	79fa      	ldrb	r2, [r7, #7]
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	b2d8      	uxtb	r0, r3
 8000dc8:	4603      	mov	r3, r0
 8000dca:	01db      	lsls	r3, r3, #7
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <ssd1306_DrawPixel+0xa4>)
 8000dd0:	5cd3      	ldrb	r3, [r2, r3]
 8000dd2:	b25a      	sxtb	r2, r3
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	4013      	ands	r3, r2
 8000de8:	b259      	sxtb	r1, r3
 8000dea:	79fa      	ldrb	r2, [r7, #7]
 8000dec:	4603      	mov	r3, r0
 8000dee:	01db      	lsls	r3, r3, #7
 8000df0:	4413      	add	r3, r2
 8000df2:	b2c9      	uxtb	r1, r1
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <ssd1306_DrawPixel+0xa4>)
 8000df6:	54d1      	strb	r1, [r2, r3]
 8000df8:	e000      	b.n	8000dfc <ssd1306_DrawPixel+0x98>
        return;
 8000dfa:	bf00      	nop
    }
}
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200000dc 	.word	0x200000dc

08000e0c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4604      	mov	r4, r0
 8000e14:	1d38      	adds	r0, r7, #4
 8000e16:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	4613      	mov	r3, r2
 8000e22:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	2b1f      	cmp	r3, #31
 8000e28:	d902      	bls.n	8000e30 <ssd1306_WriteChar+0x24>
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b7e      	cmp	r3, #126	; 0x7e
 8000e2e:	d901      	bls.n	8000e34 <ssd1306_WriteChar+0x28>
        return 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	e06d      	b.n	8000f10 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000e34:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <ssd1306_WriteChar+0x10c>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	793b      	ldrb	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	2b80      	cmp	r3, #128	; 0x80
 8000e40:	dc06      	bgt.n	8000e50 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000e42:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <ssd1306_WriteChar+0x10c>)
 8000e44:	885b      	ldrh	r3, [r3, #2]
 8000e46:	461a      	mov	r2, r3
 8000e48:	797b      	ldrb	r3, [r7, #5]
 8000e4a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000e4c:	2b40      	cmp	r3, #64	; 0x40
 8000e4e:	dd01      	ble.n	8000e54 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e05d      	b.n	8000f10 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	e04c      	b.n	8000ef4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	3b20      	subs	r3, #32
 8000e60:	7979      	ldrb	r1, [r7, #5]
 8000e62:	fb01 f303 	mul.w	r3, r1, r3
 8000e66:	4619      	mov	r1, r3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	440b      	add	r3, r1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	e034      	b.n	8000ee4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d012      	beq.n	8000eb0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e8a:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <ssd1306_WriteChar+0x10c>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	b2d8      	uxtb	r0, r3
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <ssd1306_WriteChar+0x10c>)
 8000e9a:	885b      	ldrh	r3, [r3, #2]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	7bba      	ldrb	r2, [r7, #14]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff ff5b 	bl	8000d64 <ssd1306_DrawPixel>
 8000eae:	e016      	b.n	8000ede <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <ssd1306_WriteChar+0x10c>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	b2d8      	uxtb	r0, r3
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <ssd1306_WriteChar+0x10c>)
 8000ec0:	885b      	ldrh	r3, [r3, #2]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4413      	add	r3, r2
 8000eca:	b2d9      	uxtb	r1, r3
 8000ecc:	7bbb      	ldrb	r3, [r7, #14]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f7ff ff43 	bl	8000d64 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	793b      	ldrb	r3, [r7, #4]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d3c5      	bcc.n	8000e7a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
 8000ef4:	797b      	ldrb	r3, [r7, #5]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d3ad      	bcc.n	8000e5a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <ssd1306_WriteChar+0x10c>)
 8000f00:	881a      	ldrh	r2, [r3, #0]
 8000f02:	793b      	ldrb	r3, [r7, #4]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	4413      	add	r3, r2
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <ssd1306_WriteChar+0x10c>)
 8000f0c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3724      	adds	r7, #36	; 0x24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	200004dc 	.word	0x200004dc

08000f1c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	1d38      	adds	r0, r7, #4
 8000f26:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f2a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000f2c:	e012      	b.n	8000f54 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	7818      	ldrb	r0, [r3, #0]
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	1d3a      	adds	r2, r7, #4
 8000f36:	ca06      	ldmia	r2, {r1, r2}
 8000f38:	f7ff ff68 	bl	8000e0c <ssd1306_WriteChar>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d002      	beq.n	8000f4e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	e008      	b.n	8000f60 <ssd1306_WriteString+0x44>
        }
        str++;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3301      	adds	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1e8      	bne.n	8000f2e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460a      	mov	r2, r1
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	4613      	mov	r3, r2
 8000f76:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <ssd1306_SetCursor+0x2c>)
 8000f7e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <ssd1306_SetCursor+0x2c>)
 8000f86:	805a      	strh	r2, [r3, #2]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	200004dc 	.word	0x200004dc

08000f98 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000fa2:	2381      	movs	r3, #129	; 0x81
 8000fa4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fdf3 	bl	8000b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fdef 	bl	8000b94 <ssd1306_WriteCommand>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000fd0:	23af      	movs	r3, #175	; 0xaf
 8000fd2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <ssd1306_SetDisplayOn+0x38>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	715a      	strb	r2, [r3, #5]
 8000fda:	e004      	b.n	8000fe6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000fdc:	23ae      	movs	r3, #174	; 0xae
 8000fde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <ssd1306_SetDisplayOn+0x38>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fdd3 	bl	8000b94 <ssd1306_WriteCommand>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200004dc 	.word	0x200004dc

08000ffc <sm_test1>:
    #endif

    ssd1306_UpdateScreen();
}

void sm_test1(char *ptr , int y) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]


    ssd1306_SetCursor(2, y);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4619      	mov	r1, r3
 800100c:	2002      	movs	r0, #2
 800100e:	f7ff ffab 	bl	8000f68 <ssd1306_SetCursor>
    ssd1306_WriteString(ptr, Font_7x10, White);
 8001012:	4a06      	ldr	r2, [pc, #24]	; (800102c <sm_test1+0x30>)
 8001014:	2301      	movs	r3, #1
 8001016:	ca06      	ldmia	r2, {r1, r2}
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff7f 	bl	8000f1c <ssd1306_WriteString>



    ssd1306_UpdateScreen();
 800101e:	f7ff fe79 	bl	8000d14 <ssd1306_UpdateScreen>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000014 	.word	0x20000014

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <HAL_Init+0x40>)
 800103a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_Init+0x40>)
 8001046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_Init+0x40>)
 8001052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f94f 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f808 	bl	8001074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001064:	f7ff fc74 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023c00 	.word	0x40023c00

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x54>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x58>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f967 	bl	8001366 <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f92f 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_InitTick+0x5c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000010 	.word	0x20000010
 80010cc:	20000020 	.word	0x20000020
 80010d0:	2000001c 	.word	0x2000001c

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000020 	.word	0x20000020
 80010f8:	200004e4 	.word	0x200004e4

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	200004e4 	.word	0x200004e4

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffee 	bl	80010fc <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffde 	bl	80010fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000020 	.word	0x20000020

0800115c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	; (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff29 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff3e 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff31 	bl	80011c0 <__NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffa2 	bl	80012b8 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d004      	beq.n	800139c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e00c      	b.n	80013b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2205      	movs	r2, #5
 80013a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d0:	b2db      	uxtb	r3, r3
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	e159      	b.n	80016b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013fc:	2201      	movs	r2, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	429a      	cmp	r2, r3
 8001416:	f040 8148 	bne.w	80016aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d005      	beq.n	8001432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	2b02      	cmp	r3, #2
 8001430:	d130      	bne.n	8001494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001468:	2201      	movs	r2, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	f003 0201 	and.w	r2, r3, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b03      	cmp	r3, #3
 800149e:	d017      	beq.n	80014d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d123      	bne.n	8001524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	08da      	lsrs	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3208      	adds	r2, #8
 80014e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	220f      	movs	r2, #15
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	08da      	lsrs	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3208      	adds	r2, #8
 800151e:	69b9      	ldr	r1, [r7, #24]
 8001520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	2203      	movs	r2, #3
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0203 	and.w	r2, r3, #3
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80a2 	beq.w	80016aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <HAL_GPIO_Init+0x2e8>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a56      	ldr	r2, [pc, #344]	; (80016c8 <HAL_GPIO_Init+0x2e8>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b54      	ldr	r3, [pc, #336]	; (80016c8 <HAL_GPIO_Init+0x2e8>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001582:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_GPIO_Init+0x2ec>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a49      	ldr	r2, [pc, #292]	; (80016d0 <HAL_GPIO_Init+0x2f0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d019      	beq.n	80015e2 <HAL_GPIO_Init+0x202>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a48      	ldr	r2, [pc, #288]	; (80016d4 <HAL_GPIO_Init+0x2f4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_GPIO_Init+0x1fe>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a47      	ldr	r2, [pc, #284]	; (80016d8 <HAL_GPIO_Init+0x2f8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d00d      	beq.n	80015da <HAL_GPIO_Init+0x1fa>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a46      	ldr	r2, [pc, #280]	; (80016dc <HAL_GPIO_Init+0x2fc>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d007      	beq.n	80015d6 <HAL_GPIO_Init+0x1f6>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a45      	ldr	r2, [pc, #276]	; (80016e0 <HAL_GPIO_Init+0x300>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_GPIO_Init+0x1f2>
 80015ce:	2304      	movs	r3, #4
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x204>
 80015d2:	2307      	movs	r3, #7
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x204>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x204>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x204>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x204>
 80015e2:	2300      	movs	r3, #0
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f4:	4935      	ldr	r1, [pc, #212]	; (80016cc <HAL_GPIO_Init+0x2ec>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001602:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001626:	4a2f      	ldr	r2, [pc, #188]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800162c:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_GPIO_Init+0x304>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001650:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167a:	4a1a      	ldr	r2, [pc, #104]	; (80016e4 <HAL_GPIO_Init+0x304>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_GPIO_Init+0x304>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	f67f aea2 	bls.w	80013fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40013800 	.word	0x40013800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40013c00 	.word	0x40013c00

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001704:	e003      	b.n	800170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800172c:	887a      	ldrh	r2, [r7, #2]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	041a      	lsls	r2, r3, #16
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43d9      	mvns	r1, r3
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	400b      	ands	r3, r1
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe ff26 	bl	80005c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40013c00 	.word	0x40013c00

08001780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e12b      	b.n	80019ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7fe ff48 	bl	800063c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2224      	movs	r2, #36	; 0x24
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017e4:	f002 fd4a 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 80017e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a81      	ldr	r2, [pc, #516]	; (80019f4 <HAL_I2C_Init+0x274>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d807      	bhi.n	8001804 <HAL_I2C_Init+0x84>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4a80      	ldr	r2, [pc, #512]	; (80019f8 <HAL_I2C_Init+0x278>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	bf94      	ite	ls
 80017fc:	2301      	movls	r3, #1
 80017fe:	2300      	movhi	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	e006      	b.n	8001812 <HAL_I2C_Init+0x92>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4a7d      	ldr	r2, [pc, #500]	; (80019fc <HAL_I2C_Init+0x27c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	bf94      	ite	ls
 800180c:	2301      	movls	r3, #1
 800180e:	2300      	movhi	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0e7      	b.n	80019ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4a78      	ldr	r2, [pc, #480]	; (8001a00 <HAL_I2C_Init+0x280>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0c9b      	lsrs	r3, r3, #18
 8001824:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a6a      	ldr	r2, [pc, #424]	; (80019f4 <HAL_I2C_Init+0x274>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d802      	bhi.n	8001854 <HAL_I2C_Init+0xd4>
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3301      	adds	r3, #1
 8001852:	e009      	b.n	8001868 <HAL_I2C_Init+0xe8>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	4a69      	ldr	r2, [pc, #420]	; (8001a04 <HAL_I2C_Init+0x284>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	3301      	adds	r3, #1
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	430b      	orrs	r3, r1
 800186e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800187a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	495c      	ldr	r1, [pc, #368]	; (80019f4 <HAL_I2C_Init+0x274>)
 8001884:	428b      	cmp	r3, r1
 8001886:	d819      	bhi.n	80018bc <HAL_I2C_Init+0x13c>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1e59      	subs	r1, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fbb1 f3f3 	udiv	r3, r1, r3
 8001896:	1c59      	adds	r1, r3, #1
 8001898:	f640 73fc 	movw	r3, #4092	; 0xffc
 800189c:	400b      	ands	r3, r1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <HAL_I2C_Init+0x138>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1e59      	subs	r1, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80018b0:	3301      	adds	r3, #1
 80018b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b6:	e051      	b.n	800195c <HAL_I2C_Init+0x1dc>
 80018b8:	2304      	movs	r3, #4
 80018ba:	e04f      	b.n	800195c <HAL_I2C_Init+0x1dc>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d111      	bne.n	80018e8 <HAL_I2C_Init+0x168>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1e58      	subs	r0, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	440b      	add	r3, r1
 80018d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018d6:	3301      	adds	r3, #1
 80018d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	e012      	b.n	800190e <HAL_I2C_Init+0x18e>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e58      	subs	r0, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	0099      	lsls	r1, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80018fe:	3301      	adds	r3, #1
 8001900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf0c      	ite	eq
 8001908:	2301      	moveq	r3, #1
 800190a:	2300      	movne	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Init+0x196>
 8001912:	2301      	movs	r3, #1
 8001914:	e022      	b.n	800195c <HAL_I2C_Init+0x1dc>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10e      	bne.n	800193c <HAL_I2C_Init+0x1bc>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1e58      	subs	r0, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	440b      	add	r3, r1
 800192c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001930:	3301      	adds	r3, #1
 8001932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193a:	e00f      	b.n	800195c <HAL_I2C_Init+0x1dc>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1e58      	subs	r0, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	0099      	lsls	r1, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001952:	3301      	adds	r3, #1
 8001954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	6809      	ldr	r1, [r1, #0]
 8001960:	4313      	orrs	r3, r2
 8001962:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800198a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6911      	ldr	r1, [r2, #16]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68d2      	ldr	r2, [r2, #12]
 8001996:	4311      	orrs	r1, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	430b      	orrs	r3, r1
 800199e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2220      	movs	r2, #32
 80019d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	000186a0 	.word	0x000186a0
 80019f8:	001e847f 	.word	0x001e847f
 80019fc:	003d08ff 	.word	0x003d08ff
 8001a00:	431bde83 	.word	0x431bde83
 8001a04:	10624dd3 	.word	0x10624dd3

08001a08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	4608      	mov	r0, r1
 8001a12:	4611      	mov	r1, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	4603      	mov	r3, r0
 8001a18:	817b      	strh	r3, [r7, #10]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	813b      	strh	r3, [r7, #8]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a22:	f7ff fb6b 	bl	80010fc <HAL_GetTick>
 8001a26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	f040 80d9 	bne.w	8001be8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2319      	movs	r3, #25
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	496d      	ldr	r1, [pc, #436]	; (8001bf4 <HAL_I2C_Mem_Write+0x1ec>)
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f001 fdd7 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e0cc      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_I2C_Mem_Write+0x56>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0c5      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d007      	beq.n	8001a84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2221      	movs	r2, #33	; 0x21
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2240      	movs	r2, #64	; 0x40
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a3a      	ldr	r2, [r7, #32]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_I2C_Mem_Write+0x1f0>)
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ac6:	88f8      	ldrh	r0, [r7, #6]
 8001ac8:	893a      	ldrh	r2, [r7, #8]
 8001aca:	8979      	ldrh	r1, [r7, #10]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f001 fc4e 	bl	8003378 <I2C_RequestMemoryWrite>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d052      	beq.n	8001b88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e081      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f001 fe58 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00d      	beq.n	8001b12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d107      	bne.n	8001b0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06b      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d11b      	bne.n	8001b88 <HAL_I2C_Mem_Write+0x180>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d017      	beq.n	8001b88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1aa      	bne.n	8001ae6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f001 fe44 	bl	8003822 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00d      	beq.n	8001bbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d107      	bne.n	8001bb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e016      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e000      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
  }
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	00100002 	.word	0x00100002
 8001bf8:	ffff0000 	.word	0xffff0000

08001bfc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d003      	beq.n	8001c34 <HAL_I2C_EV_IRQHandler+0x38>
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	f040 80b1 	bne.w	8001d96 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_I2C_EV_IRQHandler+0x6e>
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001c54:	d003      	beq.n	8001c5e <HAL_I2C_EV_IRQHandler+0x62>
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001c5c:	d101      	bne.n	8001c62 <HAL_I2C_EV_IRQHandler+0x66>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_I2C_EV_IRQHandler+0x68>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f000 8114 	beq.w	8001e92 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00b      	beq.n	8001c8c <HAL_I2C_EV_IRQHandler+0x90>
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f001 fe71 	bl	8003966 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fd5e 	bl	8002746 <I2C_Master_SB>
 8001c8a:	e083      	b.n	8001d94 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d008      	beq.n	8001ca8 <HAL_I2C_EV_IRQHandler+0xac>
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 fdd6 	bl	8002852 <I2C_Master_ADD10>
 8001ca6:	e075      	b.n	8001d94 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_I2C_EV_IRQHandler+0xc8>
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fdf2 	bl	80028a6 <I2C_Master_ADDR>
 8001cc2:	e067      	b.n	8001d94 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d036      	beq.n	8001d3c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cdc:	f000 80db 	beq.w	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00d      	beq.n	8001d06 <HAL_I2C_EV_IRQHandler+0x10a>
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_I2C_EV_IRQHandler+0x10a>
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f9d6 	bl	80020b0 <I2C_MasterTransmit_TXE>
 8001d04:	e046      	b.n	8001d94 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80c2 	beq.w	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80bc 	beq.w	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d1e:	7bbb      	ldrb	r3, [r7, #14]
 8001d20:	2b21      	cmp	r3, #33	; 0x21
 8001d22:	d103      	bne.n	8001d2c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fa5f 	bl	80021e8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d2a:	e0b4      	b.n	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b40      	cmp	r3, #64	; 0x40
 8001d30:	f040 80b1 	bne.w	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 facd 	bl	80022d4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d3a:	e0ac      	b.n	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d4a:	f000 80a4 	beq.w	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00d      	beq.n	8001d74 <HAL_I2C_EV_IRQHandler+0x178>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_I2C_EV_IRQHandler+0x178>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fb45 	bl	80023fc <I2C_MasterReceive_RXNE>
 8001d72:	e00f      	b.n	8001d94 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 808b 	beq.w	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8085 	beq.w	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fbf0 	bl	8002572 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d92:	e080      	b.n	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
 8001d94:	e07f      	b.n	8001e96 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	e007      	b.n	8001db8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d011      	beq.n	8001de6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00c      	beq.n	8001de6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ddc:	69b9      	ldr	r1, [r7, #24]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 ffb0 	bl	8002d44 <I2C_Slave_ADDR>
 8001de4:	e05a      	b.n	8001e9c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_I2C_EV_IRQHandler+0x206>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 ffea 	bl	8002dd4 <I2C_Slave_STOPF>
 8001e00:	e04c      	b.n	8001e9c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e02:	7bbb      	ldrb	r3, [r7, #14]
 8001e04:	2b21      	cmp	r3, #33	; 0x21
 8001e06:	d002      	beq.n	8001e0e <HAL_I2C_EV_IRQHandler+0x212>
 8001e08:	7bbb      	ldrb	r3, [r7, #14]
 8001e0a:	2b29      	cmp	r3, #41	; 0x29
 8001e0c:	d120      	bne.n	8001e50 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00d      	beq.n	8001e34 <HAL_I2C_EV_IRQHandler+0x238>
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_I2C_EV_IRQHandler+0x238>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fecb 	bl	8002bc8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e32:	e032      	b.n	8001e9a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d02d      	beq.n	8001e9a <HAL_I2C_EV_IRQHandler+0x29e>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d028      	beq.n	8001e9a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fefa 	bl	8002c42 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e4e:	e024      	b.n	8001e9a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00d      	beq.n	8001e76 <HAL_I2C_EV_IRQHandler+0x27a>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_I2C_EV_IRQHandler+0x27a>
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 ff08 	bl	8002c84 <I2C_SlaveReceive_RXNE>
 8001e74:	e012      	b.n	8001e9c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <HAL_I2C_EV_IRQHandler+0x2a0>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d008      	beq.n	8001e9c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 ff38 	bl	8002d00 <I2C_SlaveReceive_BTF>
 8001e90:	e004      	b.n	8001e9c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001e92:	bf00      	nop
 8001e94:	e002      	b.n	8001e9c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e96:	bf00      	nop
 8001e98:	e000      	b.n	8001e9c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b08a      	sub	sp, #40	; 0x28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ec4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <HAL_I2C_ER_IRQHandler+0x4a>
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001eea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00d      	beq.n	8001f12 <HAL_I2C_ER_IRQHandler+0x70>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001f10:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d03e      	beq.n	8001f9a <HAL_I2C_ER_IRQHandler+0xf8>
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d039      	beq.n	8001f9a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001f26:	7efb      	ldrb	r3, [r7, #27]
 8001f28:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f38:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001f40:	7ebb      	ldrb	r3, [r7, #26]
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d112      	bne.n	8001f6c <HAL_I2C_ER_IRQHandler+0xca>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10f      	bne.n	8001f6c <HAL_I2C_ER_IRQHandler+0xca>
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b21      	cmp	r3, #33	; 0x21
 8001f50:	d008      	beq.n	8001f64 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	2b29      	cmp	r3, #41	; 0x29
 8001f56:	d005      	beq.n	8001f64 <HAL_I2C_ER_IRQHandler+0xc2>
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	2b28      	cmp	r3, #40	; 0x28
 8001f5c:	d106      	bne.n	8001f6c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b21      	cmp	r3, #33	; 0x21
 8001f62:	d103      	bne.n	8001f6c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f001 f865 	bl	8003034 <I2C_Slave_AF>
 8001f6a:	e016      	b.n	8001f9a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f74:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f7e:	7efb      	ldrb	r3, [r7, #27]
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d002      	beq.n	8001f8a <HAL_I2C_ER_IRQHandler+0xe8>
 8001f84:	7efb      	ldrb	r3, [r7, #27]
 8001f86:	2b40      	cmp	r3, #64	; 0x40
 8001f88:	d107      	bne.n	8001f9a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f98:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_I2C_ER_IRQHandler+0x11e>
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001fbe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f001 f89e 	bl	8003114 <I2C_ITError>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
 800203c:	4613      	mov	r3, r2
 800203e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d150      	bne.n	8002178 <I2C_MasterTransmit_TXE+0xc8>
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	2b21      	cmp	r3, #33	; 0x21
 80020da:	d14d      	bne.n	8002178 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d01d      	beq.n	800211e <I2C_MasterTransmit_TXE+0x6e>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d01a      	beq.n	800211e <I2C_MasterTransmit_TXE+0x6e>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020ee:	d016      	beq.n	800211e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020fe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2211      	movs	r2, #17
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff62 	bl	8001fe0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800211c:	e060      	b.n	80021e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800212c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d107      	bne.n	8002168 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff7d 	bl	8002060 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002166:	e03b      	b.n	80021e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff35 	bl	8001fe0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002176:	e033      	b.n	80021e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b21      	cmp	r3, #33	; 0x21
 800217c:	d005      	beq.n	800218a <I2C_MasterTransmit_TXE+0xda>
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	2b40      	cmp	r3, #64	; 0x40
 8002182:	d12d      	bne.n	80021e0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b22      	cmp	r3, #34	; 0x22
 8002188:	d12a      	bne.n	80021e0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d108      	bne.n	80021a6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80021a4:	e01c      	b.n	80021e0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b40      	cmp	r3, #64	; 0x40
 80021b0:	d103      	bne.n	80021ba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f88e 	bl	80022d4 <I2C_MemoryTransmit_TXE_BTF>
}
 80021b8:	e012      	b.n	80021e0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021de:	e7ff      	b.n	80021e0 <I2C_MasterTransmit_TXE+0x130>
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b21      	cmp	r3, #33	; 0x21
 8002200:	d164      	bne.n	80022cc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002230:	e04c      	b.n	80022cc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b08      	cmp	r3, #8
 8002236:	d01d      	beq.n	8002274 <I2C_MasterTransmit_BTF+0x8c>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b20      	cmp	r3, #32
 800223c:	d01a      	beq.n	8002274 <I2C_MasterTransmit_BTF+0x8c>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002244:	d016      	beq.n	8002274 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002254:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2211      	movs	r2, #17
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff feb7 	bl	8001fe0 <HAL_I2C_MasterTxCpltCallback>
}
 8002272:	e02b      	b.n	80022cc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002282:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002292:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b40      	cmp	r3, #64	; 0x40
 80022ac:	d107      	bne.n	80022be <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fed2 	bl	8002060 <HAL_I2C_MemTxCpltCallback>
}
 80022bc:	e006      	b.n	80022cc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fe8a 	bl	8001fe0 <HAL_I2C_MasterTxCpltCallback>
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d11d      	bne.n	8002328 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d10b      	bne.n	800230c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002304:	1c9a      	adds	r2, r3, #2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800230a:	e073      	b.n	80023f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002310:	b29b      	uxth	r3, r3
 8002312:	121b      	asrs	r3, r3, #8
 8002314:	b2da      	uxtb	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002326:	e065      	b.n	80023f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10b      	bne.n	8002348 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002334:	b2da      	uxtb	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002346:	e055      	b.n	80023f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234c:	2b02      	cmp	r3, #2
 800234e:	d151      	bne.n	80023f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b22      	cmp	r3, #34	; 0x22
 8002354:	d10d      	bne.n	8002372 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002364:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002370:	e040      	b.n	80023f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d015      	beq.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	2b21      	cmp	r3, #33	; 0x21
 8002380:	d112      	bne.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023a6:	e025      	b.n	80023f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d120      	bne.n	80023f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b21      	cmp	r3, #33	; 0x21
 80023b6:	d11d      	bne.n	80023f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023c6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fe36 	bl	8002060 <HAL_I2C_MemTxCpltCallback>
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b22      	cmp	r3, #34	; 0x22
 800240e:	f040 80ac 	bne.w	800256a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d921      	bls.n	8002464 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b03      	cmp	r3, #3
 800244e:	f040 808c 	bne.w	800256a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002460:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002462:	e082      	b.n	800256a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	2b02      	cmp	r3, #2
 800246a:	d075      	beq.n	8002558 <I2C_MasterReceive_RXNE+0x15c>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d002      	beq.n	8002478 <I2C_MasterReceive_RXNE+0x7c>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d16f      	bne.n	8002558 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f001 fa13 	bl	80038a4 <I2C_WaitOnSTOPRequestThroughIT>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d142      	bne.n	800250a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002492:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d10a      	bne.n	80024f4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fdc1 	bl	8002074 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024f2:	e03a      	b.n	800256a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2212      	movs	r2, #18
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fd76 	bl	8001ff4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002508:	e02f      	b.n	800256a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002518:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fd99 	bl	8002088 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002556:	e008      	b.n	800256a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002566:	605a      	str	r2, [r3, #4]
}
 8002568:	e7ff      	b.n	800256a <I2C_MasterReceive_RXNE+0x16e>
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b04      	cmp	r3, #4
 8002588:	d11b      	bne.n	80025c2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002598:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80025c0:	e0bd      	b.n	800273e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d129      	bne.n	8002620 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025da:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d00a      	beq.n	80025f8 <I2C_MasterReceive_BTF+0x86>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d007      	beq.n	80025f8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800261e:	e08e      	b.n	800273e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d176      	bne.n	8002718 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d002      	beq.n	8002636 <I2C_MasterReceive_BTF+0xc4>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b10      	cmp	r3, #16
 8002634:	d108      	bne.n	8002648 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e019      	b.n	800267c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b04      	cmp	r3, #4
 800264c:	d002      	beq.n	8002654 <I2C_MasterReceive_BTF+0xe2>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d108      	bne.n	8002666 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e00a      	b.n	800267c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b10      	cmp	r3, #16
 800266a:	d007      	beq.n	800267c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d10a      	bne.n	8002702 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fcba 	bl	8002074 <HAL_I2C_MemRxCpltCallback>
}
 8002700:	e01d      	b.n	800273e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2212      	movs	r2, #18
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff fc6f 	bl	8001ff4 <HAL_I2C_MasterRxCpltCallback>
}
 8002716:	e012      	b.n	800273e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	d117      	bne.n	800278a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002772:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002774:	e067      	b.n	8002846 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	b2da      	uxtb	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	611a      	str	r2, [r3, #16]
}
 8002788:	e05d      	b.n	8002846 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002792:	d133      	bne.n	80027fc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b21      	cmp	r3, #33	; 0x21
 800279e:	d109      	bne.n	80027b4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b0:	611a      	str	r2, [r3, #16]
 80027b2:	e008      	b.n	80027c6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <I2C_Master_SB+0x92>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d108      	bne.n	80027ea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d032      	beq.n	8002846 <I2C_Master_SB+0x100>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d02d      	beq.n	8002846 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f8:	605a      	str	r2, [r3, #4]
}
 80027fa:	e024      	b.n	8002846 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10e      	bne.n	8002822 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	b29b      	uxth	r3, r3
 800280a:	11db      	asrs	r3, r3, #7
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f003 0306 	and.w	r3, r3, #6
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f063 030f 	orn	r3, r3, #15
 8002818:	b2da      	uxtb	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]
}
 8002820:	e011      	b.n	8002846 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10d      	bne.n	8002846 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	b29b      	uxth	r3, r3
 8002830:	11db      	asrs	r3, r3, #7
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f003 0306 	and.w	r3, r3, #6
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f063 030e 	orn	r3, r3, #14
 800283e:	b2da      	uxtb	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	611a      	str	r2, [r3, #16]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	b2da      	uxtb	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286a:	2b00      	cmp	r3, #0
 800286c:	d004      	beq.n	8002878 <I2C_Master_ADD10+0x26>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d108      	bne.n	800288a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00c      	beq.n	800289a <I2C_Master_ADD10+0x48>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002898:	605a      	str	r2, [r3, #4]
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b091      	sub	sp, #68	; 0x44
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b22      	cmp	r3, #34	; 0x22
 80028ce:	f040 8169 	bne.w	8002ba4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <I2C_Master_ADDR+0x54>
 80028da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	d10b      	bne.n	80028fa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e2:	2300      	movs	r3, #0
 80028e4:	633b      	str	r3, [r7, #48]	; 0x30
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	633b      	str	r3, [r7, #48]	; 0x30
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	e160      	b.n	8002bbc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d11d      	bne.n	800293e <I2C_Master_ADDR+0x98>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800290a:	d118      	bne.n	800293e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002930:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	651a      	str	r2, [r3, #80]	; 0x50
 800293c:	e13e      	b.n	8002bbc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d113      	bne.n	8002970 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002948:	2300      	movs	r3, #0
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e115      	b.n	8002b9c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	f040 808a 	bne.w	8002a90 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002982:	d137      	bne.n	80029f4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002992:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a2:	d113      	bne.n	80029cc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	e0e7      	b.n	8002b9c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029cc:	2300      	movs	r3, #0
 80029ce:	623b      	str	r3, [r7, #32]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e0d3      	b.n	8002b9c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d02e      	beq.n	8002a58 <I2C_Master_ADDR+0x1b2>
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d02b      	beq.n	8002a58 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a02:	2b12      	cmp	r3, #18
 8002a04:	d102      	bne.n	8002a0c <I2C_Master_ADDR+0x166>
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d125      	bne.n	8002a58 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d00e      	beq.n	8002a30 <I2C_Master_ADDR+0x18a>
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d00b      	beq.n	8002a30 <I2C_Master_ADDR+0x18a>
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d008      	beq.n	8002a30 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e007      	b.n	8002a40 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a3e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	e0a1      	b.n	8002b9c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e085      	b.n	8002b9c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d14d      	bne.n	8002b36 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d016      	beq.n	8002ace <I2C_Master_ADDR+0x228>
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d013      	beq.n	8002ace <I2C_Master_ADDR+0x228>
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d010      	beq.n	8002ace <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e007      	b.n	8002ade <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002adc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aec:	d117      	bne.n	8002b1e <I2C_Master_ADDR+0x278>
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002af4:	d00b      	beq.n	8002b0e <I2C_Master_ADDR+0x268>
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d008      	beq.n	8002b0e <I2C_Master_ADDR+0x268>
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d005      	beq.n	8002b0e <I2C_Master_ADDR+0x268>
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d002      	beq.n	8002b0e <I2C_Master_ADDR+0x268>
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d107      	bne.n	8002b1e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b1c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	e032      	b.n	8002b9c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b44:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b54:	d117      	bne.n	8002b86 <I2C_Master_ADDR+0x2e0>
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b5c:	d00b      	beq.n	8002b76 <I2C_Master_ADDR+0x2d0>
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d008      	beq.n	8002b76 <I2C_Master_ADDR+0x2d0>
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d005      	beq.n	8002b76 <I2C_Master_ADDR+0x2d0>
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d002      	beq.n	8002b76 <I2C_Master_ADDR+0x2d0>
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d107      	bne.n	8002b86 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b84:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002ba2:	e00b      	b.n	8002bbc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
}
 8002bba:	e7ff      	b.n	8002bbc <I2C_Master_ADDR+0x316>
 8002bbc:	bf00      	nop
 8002bbe:	3744      	adds	r7, #68	; 0x44
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d02b      	beq.n	8002c3a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d114      	bne.n	8002c3a <I2C_SlaveTransmit_TXE+0x72>
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b29      	cmp	r3, #41	; 0x29
 8002c14:	d111      	bne.n	8002c3a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c24:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2221      	movs	r2, #33	; 0x21
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2228      	movs	r2, #40	; 0x28
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff f9e7 	bl	8002008 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d011      	beq.n	8002c78 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d02c      	beq.n	8002cf8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d114      	bne.n	8002cf8 <I2C_SlaveReceive_RXNE+0x74>
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cd2:	d111      	bne.n	8002cf8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2222      	movs	r2, #34	; 0x22
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2228      	movs	r2, #40	; 0x28
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff f992 	bl	800201c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d012      	beq.n	8002d38 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d5e:	2b28      	cmp	r3, #40	; 0x28
 8002d60:	d125      	bne.n	8002dae <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d70:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	81bb      	strh	r3, [r7, #12]
 8002d90:	e002      	b.n	8002d98 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002da0:	89ba      	ldrh	r2, [r7, #12]
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff f942 	bl	8002030 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002dac:	e00e      	b.n	8002dcc <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002df2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e20:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e30:	d172      	bne.n	8002f18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b22      	cmp	r3, #34	; 0x22
 8002e36:	d002      	beq.n	8002e3e <I2C_Slave_STOPF+0x6a>
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e3c:	d135      	bne.n	8002eaa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe faa3 	bl	80013c2 <HAL_DMA_GetState>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d049      	beq.n	8002f16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	4a69      	ldr	r2, [pc, #420]	; (800302c <I2C_Slave_STOPF+0x258>)
 8002e88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fa75 	bl	800137e <HAL_DMA_Abort_IT>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d03d      	beq.n	8002f16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ea8:	e035      	b.n	8002f16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f043 0204 	orr.w	r2, r3, #4
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002edc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fa6d 	bl	80013c2 <HAL_DMA_GetState>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d014      	beq.n	8002f18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	4a4e      	ldr	r2, [pc, #312]	; (800302c <I2C_Slave_STOPF+0x258>)
 8002ef4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fa3f 	bl	800137e <HAL_DMA_Abort_IT>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f10:	4610      	mov	r0, r2
 8002f12:	4798      	blx	r3
 8002f14:	e000      	b.n	8002f18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d03e      	beq.n	8002fa0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d112      	bne.n	8002f56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d112      	bne.n	8002f8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0204 	orr.w	r2, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8b3 	bl	8003114 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002fae:	e039      	b.n	8003024 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8002fb4:	d109      	bne.n	8002fca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2228      	movs	r2, #40	; 0x28
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff f829 	bl	800201c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b28      	cmp	r3, #40	; 0x28
 8002fd4:	d111      	bne.n	8002ffa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a15      	ldr	r2, [pc, #84]	; (8003030 <I2C_Slave_STOPF+0x25c>)
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff f82a 	bl	800204c <HAL_I2C_ListenCpltCallback>
}
 8002ff8:	e014      	b.n	8003024 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	2b22      	cmp	r3, #34	; 0x22
 8003000:	d002      	beq.n	8003008 <I2C_Slave_STOPF+0x234>
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	2b22      	cmp	r3, #34	; 0x22
 8003006:	d10d      	bne.n	8003024 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe fffc 	bl	800201c <HAL_I2C_SlaveRxCpltCallback>
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	080034a5 	.word	0x080034a5
 8003030:	ffff0000 	.word	0xffff0000

08003034 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003042:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d002      	beq.n	8003056 <I2C_Slave_AF+0x22>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b20      	cmp	r3, #32
 8003054:	d129      	bne.n	80030aa <I2C_Slave_AF+0x76>
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b28      	cmp	r3, #40	; 0x28
 800305a:	d126      	bne.n	80030aa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a2c      	ldr	r2, [pc, #176]	; (8003110 <I2C_Slave_AF+0xdc>)
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003070:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800307a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe ffd2 	bl	800204c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80030a8:	e02e      	b.n	8003108 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	2b21      	cmp	r3, #33	; 0x21
 80030ae:	d126      	bne.n	80030fe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <I2C_Slave_AF+0xdc>)
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2221      	movs	r2, #33	; 0x21
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030da:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030e4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe ff86 	bl	8002008 <HAL_I2C_SlaveTxCpltCallback>
}
 80030fc:	e004      	b.n	8003108 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003106:	615a      	str	r2, [r3, #20]
}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	ffff0000 	.word	0xffff0000

08003114 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003122:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800312a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800312c:	7bbb      	ldrb	r3, [r7, #14]
 800312e:	2b10      	cmp	r3, #16
 8003130:	d002      	beq.n	8003138 <I2C_ITError+0x24>
 8003132:	7bbb      	ldrb	r3, [r7, #14]
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d10a      	bne.n	800314e <I2C_ITError+0x3a>
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b22      	cmp	r3, #34	; 0x22
 800313c:	d107      	bne.n	800314e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003154:	2b28      	cmp	r3, #40	; 0x28
 8003156:	d107      	bne.n	8003168 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2228      	movs	r2, #40	; 0x28
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003166:	e015      	b.n	8003194 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003176:	d00a      	beq.n	800318e <I2C_ITError+0x7a>
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b60      	cmp	r3, #96	; 0x60
 800317c:	d007      	beq.n	800318e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a2:	d162      	bne.n	800326a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d020      	beq.n	8003204 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	4a6a      	ldr	r2, [pc, #424]	; (8003370 <I2C_ITError+0x25c>)
 80031c8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe f8d5 	bl	800137e <HAL_DMA_Abort_IT>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8089 	beq.w	80032ee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031fe:	4610      	mov	r0, r2
 8003200:	4798      	blx	r3
 8003202:	e074      	b.n	80032ee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	4a59      	ldr	r2, [pc, #356]	; (8003370 <I2C_ITError+0x25c>)
 800320a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe f8b4 	bl	800137e <HAL_DMA_Abort_IT>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d068      	beq.n	80032ee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d10b      	bne.n	8003242 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003264:	4610      	mov	r0, r2
 8003266:	4798      	blx	r3
 8003268:	e041      	b.n	80032ee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b60      	cmp	r3, #96	; 0x60
 8003274:	d125      	bne.n	80032c2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d10b      	bne.n	80032aa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe feee 	bl	800209c <HAL_I2C_AbortCpltCallback>
 80032c0:	e015      	b.n	80032ee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d10b      	bne.n	80032e8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7fe fecd 	bl	8002088 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10e      	bne.n	800331c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800330e:	2b00      	cmp	r3, #0
 8003310:	d104      	bne.n	800331c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003332:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b04      	cmp	r3, #4
 800333e:	d113      	bne.n	8003368 <I2C_ITError+0x254>
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b28      	cmp	r3, #40	; 0x28
 8003344:	d110      	bne.n	8003368 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <I2C_ITError+0x260>)
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe fe72 	bl	800204c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	080034a5 	.word	0x080034a5
 8003374:	ffff0000 	.word	0xffff0000

08003378 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	4608      	mov	r0, r1
 8003382:	4611      	mov	r1, r2
 8003384:	461a      	mov	r2, r3
 8003386:	4603      	mov	r3, r0
 8003388:	817b      	strh	r3, [r7, #10]
 800338a:	460b      	mov	r3, r1
 800338c:	813b      	strh	r3, [r7, #8]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f920 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c8:	d103      	bne.n	80033d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e05f      	b.n	8003496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	492d      	ldr	r1, [pc, #180]	; (80034a0 <I2C_RequestMemoryWrite+0x128>)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f958 	bl	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e04c      	b.n	8003496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	6a39      	ldr	r1, [r7, #32]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f9c2 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b04      	cmp	r3, #4
 8003428:	d107      	bne.n	800343a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003438:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e02b      	b.n	8003496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d105      	bne.n	8003450 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	611a      	str	r2, [r3, #16]
 800344e:	e021      	b.n	8003494 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003450:	893b      	ldrh	r3, [r7, #8]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	b29b      	uxth	r3, r3
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003460:	6a39      	ldr	r1, [r7, #32]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f99c 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00d      	beq.n	800348a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2b04      	cmp	r3, #4
 8003474:	d107      	bne.n	8003486 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003484:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e005      	b.n	8003496 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800348a:	893b      	ldrh	r3, [r7, #8]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	00010002 	.word	0x00010002

080034a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034be:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <I2C_DMAAbort+0x148>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	08db      	lsrs	r3, r3, #3
 80034c4:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <I2C_DMAAbort+0x14c>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0a1a      	lsrs	r2, r3, #8
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00da      	lsls	r2, r3, #3
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034ea:	e00a      	b.n	8003502 <I2C_DMAAbort+0x5e>
    }
    count--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003500:	d0ea      	beq.n	80034d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	2200      	movs	r2, #0
 8003510:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	2200      	movs	r2, #0
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003530:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	2200      	movs	r2, #0
 8003546:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	2200      	movs	r2, #0
 8003556:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b60      	cmp	r3, #96	; 0x60
 8003572:	d10e      	bne.n	8003592 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2200      	movs	r2, #0
 8003588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800358a:	6978      	ldr	r0, [r7, #20]
 800358c:	f7fe fd86 	bl	800209c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003590:	e027      	b.n	80035e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003598:	2b28      	cmp	r3, #40	; 0x28
 800359a:	d117      	bne.n	80035cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2228      	movs	r2, #40	; 0x28
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035ca:	e007      	b.n	80035dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80035dc:	6978      	ldr	r0, [r7, #20]
 80035de:	f7fe fd53 	bl	8002088 <HAL_I2C_ErrorCallback>
}
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000010 	.word	0x20000010
 80035f0:	14f8b589 	.word	0x14f8b589

080035f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003604:	e025      	b.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d021      	beq.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fd fd75 	bl	80010fc <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e023      	b.n	800369a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10d      	bne.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x84>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	43da      	mvns	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	e00c      	b.n	8003692 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf0c      	ite	eq
 800368a:	2301      	moveq	r3, #1
 800368c:	2300      	movne	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	429a      	cmp	r2, r3
 8003696:	d0b6      	beq.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036b0:	e051      	b.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d123      	bne.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0204 	orr.w	r2, r3, #4
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e046      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d021      	beq.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7fd fcf3 	bl	80010fc <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d116      	bne.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e020      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d10c      	bne.n	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	bf14      	ite	ne
 8003772:	2301      	movne	r3, #1
 8003774:	2300      	moveq	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	e00b      	b.n	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d18d      	bne.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ac:	e02d      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f8aa 	bl	8003908 <I2C_IsAcknowledgeFailed>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e02d      	b.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d021      	beq.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fd fc99 	bl	80010fc <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e007      	b.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d1ca      	bne.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800382e:	e02d      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f869 	bl	8003908 <I2C_IsAcknowledgeFailed>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e02d      	b.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d021      	beq.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003848:	f7fd fc58 	bl	80010fc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	429a      	cmp	r2, r3
 8003856:	d302      	bcc.n	800385e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d116      	bne.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e007      	b.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b04      	cmp	r3, #4
 8003898:	d1ca      	bne.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	08db      	lsrs	r3, r3, #3
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	0a1a      	lsrs	r2, r3, #8
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d107      	bne.n	80038e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f043 0220 	orr.w	r2, r3, #32
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e008      	b.n	80038f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f0:	d0e9      	beq.n	80038c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	20000010 	.word	0x20000010
 8003904:	14f8b589 	.word	0x14f8b589

08003908 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d11b      	bne.n	8003958 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003928:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f043 0204 	orr.w	r2, r3, #4
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003976:	d103      	bne.n	8003980 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800397e:	e007      	b.n	8003990 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003988:	d102      	bne.n	8003990 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2208      	movs	r2, #8
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e267      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d075      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ba:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d00c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c6:	4b85      	ldr	r3, [pc, #532]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d112      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d2:	4b82      	ldr	r3, [pc, #520]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039de:	d10b      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4b7e      	ldr	r3, [pc, #504]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d05b      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x108>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d157      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e242      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x74>
 8003a02:	4b76      	ldr	r3, [pc, #472]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a75      	ldr	r2, [pc, #468]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e01d      	b.n	8003a4c <HAL_RCC_OscConfig+0xb0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x98>
 8003a1a:	4b70      	ldr	r3, [pc, #448]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6f      	ldr	r2, [pc, #444]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b6d      	ldr	r3, [pc, #436]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6c      	ldr	r2, [pc, #432]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0xb0>
 8003a34:	4b69      	ldr	r3, [pc, #420]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a68      	ldr	r2, [pc, #416]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b66      	ldr	r3, [pc, #408]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a65      	ldr	r2, [pc, #404]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fd fb52 	bl	80010fc <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fb4e 	bl	80010fc <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e207      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0xc0>
 8003a7a:	e014      	b.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fd fb3e 	bl	80010fc <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fd fb3a 	bl	80010fc <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e1f3      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0xe8>
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d063      	beq.n	8003b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d11c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aca:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d116      	bne.n	8003b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_RCC_OscConfig+0x152>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e1c7      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4937      	ldr	r1, [pc, #220]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b02:	e03a      	b.n	8003b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0c:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <HAL_RCC_OscConfig+0x244>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fd faf3 	bl	80010fc <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fd faef 	bl	80010fc <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e1a8      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4925      	ldr	r1, [pc, #148]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]
 8003b4c:	e015      	b.n	8003b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <HAL_RCC_OscConfig+0x244>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fd fad2 	bl	80010fc <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fd face 	bl	80010fc <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e187      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d036      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_RCC_OscConfig+0x248>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fd fab2 	bl	80010fc <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fd faae 	bl	80010fc <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e167      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x200>
 8003bba:	e01b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_OscConfig+0x248>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7fd fa9b 	bl	80010fc <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	e00e      	b.n	8003be8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bca:	f7fd fa97 	bl	80010fc <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d907      	bls.n	8003be8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e150      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	42470000 	.word	0x42470000
 8003be4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	4b88      	ldr	r3, [pc, #544]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ea      	bne.n	8003bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8097 	beq.w	8003d30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b81      	ldr	r3, [pc, #516]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	4b7d      	ldr	r3, [pc, #500]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a7c      	ldr	r2, [pc, #496]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40
 8003c22:	4b7a      	ldr	r3, [pc, #488]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c32:	4b77      	ldr	r3, [pc, #476]	; (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d118      	bne.n	8003c70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3e:	4b74      	ldr	r3, [pc, #464]	; (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a73      	ldr	r2, [pc, #460]	; (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fd fa57 	bl	80010fc <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fd fa53 	bl	80010fc <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e10c      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <HAL_RCC_OscConfig+0x2ea>
 8003c78:	4b64      	ldr	r3, [pc, #400]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a63      	ldr	r2, [pc, #396]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
 8003c84:	e01c      	b.n	8003cc0 <HAL_RCC_OscConfig+0x324>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x30c>
 8003c8e:	4b5f      	ldr	r3, [pc, #380]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	4a5e      	ldr	r2, [pc, #376]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9a:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x324>
 8003ca8:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a57      	ldr	r2, [pc, #348]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	4b55      	ldr	r3, [pc, #340]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a54      	ldr	r2, [pc, #336]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003cba:	f023 0304 	bic.w	r3, r3, #4
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fd fa18 	bl	80010fc <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd0:	f7fd fa14 	bl	80010fc <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0cb      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0ee      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x334>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fa02 	bl	80010fc <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f7fd f9fe 	bl	80010fc <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0b5      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	4b3e      	ldr	r3, [pc, #248]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ee      	bne.n	8003cfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	4a38      	ldr	r2, [pc, #224]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80a1 	beq.w	8003e7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3a:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d05c      	beq.n	8003e00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d141      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_RCC_OscConfig+0x478>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fd f9d2 	bl	80010fc <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fd f9ce 	bl	80010fc <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e087      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	019b      	lsls	r3, r3, #6
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	085b      	lsrs	r3, r3, #1
 8003d92:	3b01      	subs	r3, #1
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	061b      	lsls	r3, r3, #24
 8003d9e:	491b      	ldr	r1, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_RCC_OscConfig+0x478>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fd f9a7 	bl	80010fc <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fd f9a3 	bl	80010fc <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e05c      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x416>
 8003dd0:	e054      	b.n	8003e7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <HAL_RCC_OscConfig+0x478>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7fd f990 	bl	80010fc <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fd f98c 	bl	80010fc <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e045      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x444>
 8003dfe:	e03d      	b.n	8003e7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e038      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40007000 	.word	0x40007000
 8003e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x4ec>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d028      	beq.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d121      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d11a      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d111      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800

08003e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0cc      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b68      	ldr	r3, [pc, #416]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d90c      	bls.n	8003ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b65      	ldr	r3, [pc, #404]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b63      	ldr	r3, [pc, #396]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0b8      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a58      	ldr	r2, [pc, #352]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef8:	4b53      	ldr	r3, [pc, #332]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a52      	ldr	r2, [pc, #328]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f04:	4b50      	ldr	r3, [pc, #320]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	494d      	ldr	r1, [pc, #308]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d044      	beq.n	8003fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d119      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e07f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d003      	beq.n	8003f4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d107      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	4b3f      	ldr	r3, [pc, #252]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e06f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e067      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6a:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f023 0203 	bic.w	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4934      	ldr	r1, [pc, #208]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f7c:	f7fd f8be 	bl	80010fc <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f84:	f7fd f8ba 	bl	80010fc <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e04f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 020c 	and.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d1eb      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d20c      	bcs.n	8003fd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e032      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4916      	ldr	r1, [pc, #88]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	490e      	ldr	r1, [pc, #56]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004012:	f000 f821 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8004016:	4602      	mov	r2, r0
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	490a      	ldr	r1, [pc, #40]	; (800404c <HAL_RCC_ClockConfig+0x1c0>)
 8004024:	5ccb      	ldrb	r3, [r1, r3]
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	4a09      	ldr	r2, [pc, #36]	; (8004050 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd f81e 	bl	8001074 <HAL_InitTick>

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40023c00 	.word	0x40023c00
 8004048:	40023800 	.word	0x40023800
 800404c:	08004b38 	.word	0x08004b38
 8004050:	20000010 	.word	0x20000010
 8004054:	2000001c 	.word	0x2000001c

08004058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800405c:	b094      	sub	sp, #80	; 0x50
 800405e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	647b      	str	r3, [r7, #68]	; 0x44
 8004064:	2300      	movs	r3, #0
 8004066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004068:	2300      	movs	r3, #0
 800406a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004070:	4b79      	ldr	r3, [pc, #484]	; (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b08      	cmp	r3, #8
 800407a:	d00d      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x40>
 800407c:	2b08      	cmp	r3, #8
 800407e:	f200 80e1 	bhi.w	8004244 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x34>
 8004086:	2b04      	cmp	r3, #4
 8004088:	d003      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0x3a>
 800408a:	e0db      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800408c:	4b73      	ldr	r3, [pc, #460]	; (800425c <HAL_RCC_GetSysClockFreq+0x204>)
 800408e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004090:	e0db      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004092:	4b73      	ldr	r3, [pc, #460]	; (8004260 <HAL_RCC_GetSysClockFreq+0x208>)
 8004094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004096:	e0d8      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004098:	4b6f      	ldr	r3, [pc, #444]	; (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a2:	4b6d      	ldr	r3, [pc, #436]	; (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d063      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ae:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	2200      	movs	r2, #0
 80040b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
 80040c2:	2300      	movs	r3, #0
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
 80040c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040ca:	4622      	mov	r2, r4
 80040cc:	462b      	mov	r3, r5
 80040ce:	f04f 0000 	mov.w	r0, #0
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	0159      	lsls	r1, r3, #5
 80040d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040dc:	0150      	lsls	r0, r2, #5
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4621      	mov	r1, r4
 80040e4:	1a51      	subs	r1, r2, r1
 80040e6:	6139      	str	r1, [r7, #16]
 80040e8:	4629      	mov	r1, r5
 80040ea:	eb63 0301 	sbc.w	r3, r3, r1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040fc:	4659      	mov	r1, fp
 80040fe:	018b      	lsls	r3, r1, #6
 8004100:	4651      	mov	r1, sl
 8004102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004106:	4651      	mov	r1, sl
 8004108:	018a      	lsls	r2, r1, #6
 800410a:	4651      	mov	r1, sl
 800410c:	ebb2 0801 	subs.w	r8, r2, r1
 8004110:	4659      	mov	r1, fp
 8004112:	eb63 0901 	sbc.w	r9, r3, r1
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800412a:	4690      	mov	r8, r2
 800412c:	4699      	mov	r9, r3
 800412e:	4623      	mov	r3, r4
 8004130:	eb18 0303 	adds.w	r3, r8, r3
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	462b      	mov	r3, r5
 8004138:	eb49 0303 	adc.w	r3, r9, r3
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800414a:	4629      	mov	r1, r5
 800414c:	024b      	lsls	r3, r1, #9
 800414e:	4621      	mov	r1, r4
 8004150:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004154:	4621      	mov	r1, r4
 8004156:	024a      	lsls	r2, r1, #9
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800415e:	2200      	movs	r2, #0
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
 8004162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004164:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004168:	f7fc f836 	bl	80001d8 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4613      	mov	r3, r2
 8004172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004174:	e058      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004176:	4b38      	ldr	r3, [pc, #224]	; (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	099b      	lsrs	r3, r3, #6
 800417c:	2200      	movs	r2, #0
 800417e:	4618      	mov	r0, r3
 8004180:	4611      	mov	r1, r2
 8004182:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004186:	623b      	str	r3, [r7, #32]
 8004188:	2300      	movs	r3, #0
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
 800418c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004190:	4642      	mov	r2, r8
 8004192:	464b      	mov	r3, r9
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f04f 0100 	mov.w	r1, #0
 800419c:	0159      	lsls	r1, r3, #5
 800419e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a2:	0150      	lsls	r0, r2, #5
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4641      	mov	r1, r8
 80041aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ae:	4649      	mov	r1, r9
 80041b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041c8:	ebb2 040a 	subs.w	r4, r2, sl
 80041cc:	eb63 050b 	sbc.w	r5, r3, fp
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	00eb      	lsls	r3, r5, #3
 80041da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041de:	00e2      	lsls	r2, r4, #3
 80041e0:	4614      	mov	r4, r2
 80041e2:	461d      	mov	r5, r3
 80041e4:	4643      	mov	r3, r8
 80041e6:	18e3      	adds	r3, r4, r3
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	464b      	mov	r3, r9
 80041ec:	eb45 0303 	adc.w	r3, r5, r3
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041fe:	4629      	mov	r1, r5
 8004200:	028b      	lsls	r3, r1, #10
 8004202:	4621      	mov	r1, r4
 8004204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004208:	4621      	mov	r1, r4
 800420a:	028a      	lsls	r2, r1, #10
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004212:	2200      	movs	r2, #0
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	61fa      	str	r2, [r7, #28]
 8004218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800421c:	f7fb ffdc 	bl	80001d8 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4613      	mov	r3, r2
 8004226:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	3301      	adds	r3, #1
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800423a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004242:	e002      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_RCC_GetSysClockFreq+0x204>)
 8004246:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800424c:	4618      	mov	r0, r3
 800424e:	3750      	adds	r7, #80	; 0x50
 8004250:	46bd      	mov	sp, r7
 8004252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	00f42400 	.word	0x00f42400
 8004260:	007a1200 	.word	0x007a1200

08004264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <HAL_RCC_GetHCLKFreq+0x14>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000010 	.word	0x20000010

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004280:	f7ff fff0 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	0a9b      	lsrs	r3, r3, #10
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4903      	ldr	r1, [pc, #12]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40023800 	.word	0x40023800
 80042a0:	08004b48 	.word	0x08004b48

080042a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042a8:	f7ff ffdc 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0b5b      	lsrs	r3, r3, #13
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	08004b48 	.word	0x08004b48

080042cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e03f      	b.n	800435e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fc fbd6 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	; 0x24
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f929 	bl	8004568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b08a      	sub	sp, #40	; 0x28
 800436a:	af02      	add	r7, sp, #8
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	4613      	mov	r3, r2
 8004374:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b20      	cmp	r3, #32
 8004384:	d17c      	bne.n	8004480 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_UART_Transmit+0x2c>
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e075      	b.n	8004482 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_UART_Transmit+0x3e>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e06e      	b.n	8004482 <HAL_UART_Transmit+0x11c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2221      	movs	r2, #33	; 0x21
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ba:	f7fc fe9f 	bl	80010fc <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	88fa      	ldrh	r2, [r7, #6]
 80043ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d4:	d108      	bne.n	80043e8 <HAL_UART_Transmit+0x82>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	e003      	b.n	80043f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043f8:	e02a      	b.n	8004450 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	2180      	movs	r1, #128	; 0x80
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f840 	bl	800448a <UART_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e036      	b.n	8004482 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004428:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	3302      	adds	r3, #2
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e007      	b.n	8004442 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	3301      	adds	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1cf      	bne.n	80043fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2200      	movs	r2, #0
 8004462:	2140      	movs	r1, #64	; 0x40
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f810 	bl	800448a <UART_WaitOnFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e006      	b.n	8004482 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b090      	sub	sp, #64	; 0x40
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	4613      	mov	r3, r2
 8004498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449a:	e050      	b.n	800453e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d04c      	beq.n	800453e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <UART_WaitOnFlagUntilTimeout+0x30>
 80044aa:	f7fc fe27 	bl	80010fc <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d241      	bcs.n	800453e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044da:	637a      	str	r2, [r7, #52]	; 0x34
 80044dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e5      	bne.n	80044ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	613b      	str	r3, [r7, #16]
   return(result);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3314      	adds	r3, #20
 800450c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800450e:	623a      	str	r2, [r7, #32]
 8004510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	69f9      	ldr	r1, [r7, #28]
 8004514:	6a3a      	ldr	r2, [r7, #32]
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	61bb      	str	r3, [r7, #24]
   return(result);
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e5      	bne.n	80044ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e00f      	b.n	800455e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4013      	ands	r3, r2
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	429a      	cmp	r2, r3
 800455a:	d09f      	beq.n	800449c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3740      	adds	r7, #64	; 0x40
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800456c:	b0c0      	sub	sp, #256	; 0x100
 800456e:	af00      	add	r7, sp, #0
 8004570:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	68d9      	ldr	r1, [r3, #12]
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	ea40 0301 	orr.w	r3, r0, r1
 8004590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	431a      	orrs	r2, r3
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045c0:	f021 010c 	bic.w	r1, r1, #12
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045ce:	430b      	orrs	r3, r1
 80045d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	6999      	ldr	r1, [r3, #24]
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	ea40 0301 	orr.w	r3, r0, r1
 80045ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4b8f      	ldr	r3, [pc, #572]	; (8004834 <UART_SetConfig+0x2cc>)
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d005      	beq.n	8004608 <UART_SetConfig+0xa0>
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b8d      	ldr	r3, [pc, #564]	; (8004838 <UART_SetConfig+0x2d0>)
 8004604:	429a      	cmp	r2, r3
 8004606:	d104      	bne.n	8004612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004608:	f7ff fe4c 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 800460c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004610:	e003      	b.n	800461a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004612:	f7ff fe33 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8004616:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004624:	f040 810c 	bne.w	8004840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800462c:	2200      	movs	r2, #0
 800462e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004632:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800463a:	4622      	mov	r2, r4
 800463c:	462b      	mov	r3, r5
 800463e:	1891      	adds	r1, r2, r2
 8004640:	65b9      	str	r1, [r7, #88]	; 0x58
 8004642:	415b      	adcs	r3, r3
 8004644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800464a:	4621      	mov	r1, r4
 800464c:	eb12 0801 	adds.w	r8, r2, r1
 8004650:	4629      	mov	r1, r5
 8004652:	eb43 0901 	adc.w	r9, r3, r1
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800466a:	4690      	mov	r8, r2
 800466c:	4699      	mov	r9, r3
 800466e:	4623      	mov	r3, r4
 8004670:	eb18 0303 	adds.w	r3, r8, r3
 8004674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004678:	462b      	mov	r3, r5
 800467a:	eb49 0303 	adc.w	r3, r9, r3
 800467e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800468e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004696:	460b      	mov	r3, r1
 8004698:	18db      	adds	r3, r3, r3
 800469a:	653b      	str	r3, [r7, #80]	; 0x50
 800469c:	4613      	mov	r3, r2
 800469e:	eb42 0303 	adc.w	r3, r2, r3
 80046a2:	657b      	str	r3, [r7, #84]	; 0x54
 80046a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046ac:	f7fb fd94 	bl	80001d8 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4b61      	ldr	r3, [pc, #388]	; (800483c <UART_SetConfig+0x2d4>)
 80046b6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	011c      	lsls	r4, r3, #4
 80046be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	1891      	adds	r1, r2, r2
 80046d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80046d8:	415b      	adcs	r3, r3
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046e0:	4641      	mov	r1, r8
 80046e2:	eb12 0a01 	adds.w	sl, r2, r1
 80046e6:	4649      	mov	r1, r9
 80046e8:	eb43 0b01 	adc.w	fp, r3, r1
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004700:	4692      	mov	sl, r2
 8004702:	469b      	mov	fp, r3
 8004704:	4643      	mov	r3, r8
 8004706:	eb1a 0303 	adds.w	r3, sl, r3
 800470a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800470e:	464b      	mov	r3, r9
 8004710:	eb4b 0303 	adc.w	r3, fp, r3
 8004714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004724:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800472c:	460b      	mov	r3, r1
 800472e:	18db      	adds	r3, r3, r3
 8004730:	643b      	str	r3, [r7, #64]	; 0x40
 8004732:	4613      	mov	r3, r2
 8004734:	eb42 0303 	adc.w	r3, r2, r3
 8004738:	647b      	str	r3, [r7, #68]	; 0x44
 800473a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800473e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004742:	f7fb fd49 	bl	80001d8 <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4611      	mov	r1, r2
 800474c:	4b3b      	ldr	r3, [pc, #236]	; (800483c <UART_SetConfig+0x2d4>)
 800474e:	fba3 2301 	umull	r2, r3, r3, r1
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2264      	movs	r2, #100	; 0x64
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	1acb      	subs	r3, r1, r3
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004762:	4b36      	ldr	r3, [pc, #216]	; (800483c <UART_SetConfig+0x2d4>)
 8004764:	fba3 2302 	umull	r2, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004770:	441c      	add	r4, r3
 8004772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004776:	2200      	movs	r2, #0
 8004778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800477c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004784:	4642      	mov	r2, r8
 8004786:	464b      	mov	r3, r9
 8004788:	1891      	adds	r1, r2, r2
 800478a:	63b9      	str	r1, [r7, #56]	; 0x38
 800478c:	415b      	adcs	r3, r3
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004794:	4641      	mov	r1, r8
 8004796:	1851      	adds	r1, r2, r1
 8004798:	6339      	str	r1, [r7, #48]	; 0x30
 800479a:	4649      	mov	r1, r9
 800479c:	414b      	adcs	r3, r1
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047ac:	4659      	mov	r1, fp
 80047ae:	00cb      	lsls	r3, r1, #3
 80047b0:	4651      	mov	r1, sl
 80047b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b6:	4651      	mov	r1, sl
 80047b8:	00ca      	lsls	r2, r1, #3
 80047ba:	4610      	mov	r0, r2
 80047bc:	4619      	mov	r1, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	4642      	mov	r2, r8
 80047c2:	189b      	adds	r3, r3, r2
 80047c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047c8:	464b      	mov	r3, r9
 80047ca:	460a      	mov	r2, r1
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047e8:	460b      	mov	r3, r1
 80047ea:	18db      	adds	r3, r3, r3
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ee:	4613      	mov	r3, r2
 80047f0:	eb42 0303 	adc.w	r3, r2, r3
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047fe:	f7fb fceb 	bl	80001d8 <__aeabi_uldivmod>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <UART_SetConfig+0x2d4>)
 8004808:	fba3 1302 	umull	r1, r3, r3, r2
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	2164      	movs	r1, #100	; 0x64
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	3332      	adds	r3, #50	; 0x32
 800481a:	4a08      	ldr	r2, [pc, #32]	; (800483c <UART_SetConfig+0x2d4>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	f003 0207 	and.w	r2, r3, #7
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4422      	add	r2, r4
 800482e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004830:	e106      	b.n	8004a40 <UART_SetConfig+0x4d8>
 8004832:	bf00      	nop
 8004834:	40011000 	.word	0x40011000
 8004838:	40011400 	.word	0x40011400
 800483c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004844:	2200      	movs	r2, #0
 8004846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800484a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800484e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004852:	4642      	mov	r2, r8
 8004854:	464b      	mov	r3, r9
 8004856:	1891      	adds	r1, r2, r2
 8004858:	6239      	str	r1, [r7, #32]
 800485a:	415b      	adcs	r3, r3
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
 800485e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004862:	4641      	mov	r1, r8
 8004864:	1854      	adds	r4, r2, r1
 8004866:	4649      	mov	r1, r9
 8004868:	eb43 0501 	adc.w	r5, r3, r1
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	00eb      	lsls	r3, r5, #3
 8004876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800487a:	00e2      	lsls	r2, r4, #3
 800487c:	4614      	mov	r4, r2
 800487e:	461d      	mov	r5, r3
 8004880:	4643      	mov	r3, r8
 8004882:	18e3      	adds	r3, r4, r3
 8004884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004888:	464b      	mov	r3, r9
 800488a:	eb45 0303 	adc.w	r3, r5, r3
 800488e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800489e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048ae:	4629      	mov	r1, r5
 80048b0:	008b      	lsls	r3, r1, #2
 80048b2:	4621      	mov	r1, r4
 80048b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b8:	4621      	mov	r1, r4
 80048ba:	008a      	lsls	r2, r1, #2
 80048bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048c0:	f7fb fc8a 	bl	80001d8 <__aeabi_uldivmod>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4b60      	ldr	r3, [pc, #384]	; (8004a4c <UART_SetConfig+0x4e4>)
 80048ca:	fba3 2302 	umull	r2, r3, r3, r2
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	011c      	lsls	r4, r3, #4
 80048d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048e4:	4642      	mov	r2, r8
 80048e6:	464b      	mov	r3, r9
 80048e8:	1891      	adds	r1, r2, r2
 80048ea:	61b9      	str	r1, [r7, #24]
 80048ec:	415b      	adcs	r3, r3
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f4:	4641      	mov	r1, r8
 80048f6:	1851      	adds	r1, r2, r1
 80048f8:	6139      	str	r1, [r7, #16]
 80048fa:	4649      	mov	r1, r9
 80048fc:	414b      	adcs	r3, r1
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800490c:	4659      	mov	r1, fp
 800490e:	00cb      	lsls	r3, r1, #3
 8004910:	4651      	mov	r1, sl
 8004912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004916:	4651      	mov	r1, sl
 8004918:	00ca      	lsls	r2, r1, #3
 800491a:	4610      	mov	r0, r2
 800491c:	4619      	mov	r1, r3
 800491e:	4603      	mov	r3, r0
 8004920:	4642      	mov	r2, r8
 8004922:	189b      	adds	r3, r3, r2
 8004924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004928:	464b      	mov	r3, r9
 800492a:	460a      	mov	r2, r1
 800492c:	eb42 0303 	adc.w	r3, r2, r3
 8004930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	67bb      	str	r3, [r7, #120]	; 0x78
 800493e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800494c:	4649      	mov	r1, r9
 800494e:	008b      	lsls	r3, r1, #2
 8004950:	4641      	mov	r1, r8
 8004952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004956:	4641      	mov	r1, r8
 8004958:	008a      	lsls	r2, r1, #2
 800495a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800495e:	f7fb fc3b 	bl	80001d8 <__aeabi_uldivmod>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4611      	mov	r1, r2
 8004968:	4b38      	ldr	r3, [pc, #224]	; (8004a4c <UART_SetConfig+0x4e4>)
 800496a:	fba3 2301 	umull	r2, r3, r3, r1
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2264      	movs	r2, #100	; 0x64
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	1acb      	subs	r3, r1, r3
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	3332      	adds	r3, #50	; 0x32
 800497c:	4a33      	ldr	r2, [pc, #204]	; (8004a4c <UART_SetConfig+0x4e4>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004988:	441c      	add	r4, r3
 800498a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800498e:	2200      	movs	r2, #0
 8004990:	673b      	str	r3, [r7, #112]	; 0x70
 8004992:	677a      	str	r2, [r7, #116]	; 0x74
 8004994:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004998:	4642      	mov	r2, r8
 800499a:	464b      	mov	r3, r9
 800499c:	1891      	adds	r1, r2, r2
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	415b      	adcs	r3, r3
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049a8:	4641      	mov	r1, r8
 80049aa:	1851      	adds	r1, r2, r1
 80049ac:	6039      	str	r1, [r7, #0]
 80049ae:	4649      	mov	r1, r9
 80049b0:	414b      	adcs	r3, r1
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049c0:	4659      	mov	r1, fp
 80049c2:	00cb      	lsls	r3, r1, #3
 80049c4:	4651      	mov	r1, sl
 80049c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ca:	4651      	mov	r1, sl
 80049cc:	00ca      	lsls	r2, r1, #3
 80049ce:	4610      	mov	r0, r2
 80049d0:	4619      	mov	r1, r3
 80049d2:	4603      	mov	r3, r0
 80049d4:	4642      	mov	r2, r8
 80049d6:	189b      	adds	r3, r3, r2
 80049d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049da:	464b      	mov	r3, r9
 80049dc:	460a      	mov	r2, r1
 80049de:	eb42 0303 	adc.w	r3, r2, r3
 80049e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	663b      	str	r3, [r7, #96]	; 0x60
 80049ee:	667a      	str	r2, [r7, #100]	; 0x64
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049fc:	4649      	mov	r1, r9
 80049fe:	008b      	lsls	r3, r1, #2
 8004a00:	4641      	mov	r1, r8
 8004a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a06:	4641      	mov	r1, r8
 8004a08:	008a      	lsls	r2, r1, #2
 8004a0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a0e:	f7fb fbe3 	bl	80001d8 <__aeabi_uldivmod>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <UART_SetConfig+0x4e4>)
 8004a18:	fba3 1302 	umull	r1, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	2164      	movs	r1, #100	; 0x64
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	3332      	adds	r3, #50	; 0x32
 8004a2a:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <UART_SetConfig+0x4e4>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	f003 020f 	and.w	r2, r3, #15
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4422      	add	r2, r4
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a46:	46bd      	mov	sp, r7
 8004a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a4c:	51eb851f 	.word	0x51eb851f

08004a50 <memset>:
 8004a50:	4402      	add	r2, r0
 8004a52:	4603      	mov	r3, r0
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d100      	bne.n	8004a5a <memset+0xa>
 8004a58:	4770      	bx	lr
 8004a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5e:	e7f9      	b.n	8004a54 <memset+0x4>

08004a60 <__libc_init_array>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	4d0d      	ldr	r5, [pc, #52]	; (8004a98 <__libc_init_array+0x38>)
 8004a64:	4c0d      	ldr	r4, [pc, #52]	; (8004a9c <__libc_init_array+0x3c>)
 8004a66:	1b64      	subs	r4, r4, r5
 8004a68:	10a4      	asrs	r4, r4, #2
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	42a6      	cmp	r6, r4
 8004a6e:	d109      	bne.n	8004a84 <__libc_init_array+0x24>
 8004a70:	4d0b      	ldr	r5, [pc, #44]	; (8004aa0 <__libc_init_array+0x40>)
 8004a72:	4c0c      	ldr	r4, [pc, #48]	; (8004aa4 <__libc_init_array+0x44>)
 8004a74:	f000 f818 	bl	8004aa8 <_init>
 8004a78:	1b64      	subs	r4, r4, r5
 8004a7a:	10a4      	asrs	r4, r4, #2
 8004a7c:	2600      	movs	r6, #0
 8004a7e:	42a6      	cmp	r6, r4
 8004a80:	d105      	bne.n	8004a8e <__libc_init_array+0x2e>
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
 8004a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a88:	4798      	blx	r3
 8004a8a:	3601      	adds	r6, #1
 8004a8c:	e7ee      	b.n	8004a6c <__libc_init_array+0xc>
 8004a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a92:	4798      	blx	r3
 8004a94:	3601      	adds	r6, #1
 8004a96:	e7f2      	b.n	8004a7e <__libc_init_array+0x1e>
 8004a98:	080052c4 	.word	0x080052c4
 8004a9c:	080052c4 	.word	0x080052c4
 8004aa0:	080052c4 	.word	0x080052c4
 8004aa4:	080052c8 	.word	0x080052c8

08004aa8 <_init>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	bf00      	nop
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr

08004ab4 <_fini>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr
